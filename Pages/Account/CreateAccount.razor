@page "/create-account"
@using Microsoft.AspNetCore.Identity;
@using System.ComponentModel.DataAnnotations;
@using Waifustasia.Data.Authentication;

<h3>Create Account</h3>
@if (result != null && result.Succeeded)
{
    <div class="alert alert-success" role="alert">
        Account created successfully!
    </div>
}
else
{
    <EditForm Model="@registerModel" OnValidSubmit="CreateUser" class="needs-validation">
        <DataAnnotationsValidator />

        @if (result != null && !result.Succeeded)
        {
            <div class="alert alert-danger" role="alert">
                @foreach (var error in result.Errors)
                {
                    <p>@error.Description</p>
                }
            </div>
        }

        <div class="mb-3">
            <label for="InputEmail" class="form-label">Email</label>
            <InputText id="InputEmail" @bind-Value="@registerModel.Email" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Email)" class="invalid-feedback" />
        </div>

        <div class="mb-3">
            <label for="InputPassword" class="form-label">Password</label>
            <InputText id="InputPassword" type="password" @bind-Value="@registerModel.Password" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Password)" class="invalid-feedback" />
        </div>

        <button type="submit" class="btn btn-primary">Create Account</button>
    </EditForm>
}

@code {
    private RegisterModel registerModel = new RegisterModel();
    private IdentityResult result;

    [Inject] private UserManager<Waifustasia.Data.User.User> userManager { get; set; }
    [Inject] private SignInManager<Waifustasia.Data.User.User> signInManager { get; set; }
    [Inject] private WaifustasiaAuthenticationStateProvider WaifustasiaAuthenticationStateProvider { get; set; }

    [Inject] NavigationManager navigationManager { get; set; }

    private async Task CreateUser()
    {
        var user = new Waifustasia.Data.User.User
            {
                Id = Guid.NewGuid().ToString(),
                UserName = registerModel.Email,
                DisplayName = "NewUser",
                Email = registerModel.Email,
                Password = registerModel.Password
            };
        result = await userManager.CreateAsync(user, registerModel.Password);

        if (result.Succeeded)
        {
            await WaifustasiaAuthenticationStateProvider.LoginAsync(registerModel.Email, registerModel.Password);
            //navigationManager.NavigateTo("/");
            StateHasChanged();
        }
        else
        {
            foreach (var error in result.Errors)
            {
                // Display error messages to the user
                // You can add your logic to show these messages in the UI
                Console.WriteLine($"Error: {error.Description}");
            }
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
}